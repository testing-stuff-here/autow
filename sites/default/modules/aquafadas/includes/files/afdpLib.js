//Cette classe contient toutes les mécaniques nécessaires pour un enricihssement HTML5
//Elle contient donc le code pour les différentes interfaces nécessaires pour agir avec les différents player, 
//d'où le script de détection du browser...

//A noter: afdpSettings.js doit être importé après, pas avant

(function(){
	
    function AFDPConstructor() {
    	
    	//tell that this is conform to the protocol ( webview will check this to know it is talking with an HTML5 enrichment)
		this.AFDPProtocolCompliant = function (){
			return 1;
		};
		
    	
    	//----------------------------------------------------------
    	//-------------------MODEL DATA ----------------------------
    	//----------------------------------------------------------
    	//Actual model data (Those will be filled by the settings.js file generated by the DigitalPublishing tools)
    	
    	//Settings of the layout element
		this.settings = {};
		//File sources (id => url)
		this.fileSourceMap = {};
		//Object references (id => layoutElementId)
		this.objectReferenceMap = {};
		
		//Accessors
		this.getFilePath = function(fileSourceId){
			return this.fileSourceMap[fileSourceId]; 
		};
		this.getObjectId = function(objectReferenceId){
			return this.objectReferenceMap[objectReferenceId];
		};
		
		//----------------------------------------------------------
    	//-------------------LOCAL STORAGE -------------------------
    	//----------------------------------------------------------
    	
    	//a simple map to store local values (score, etc...)
    	this.afDict = {};
    	
		this.setValueForKey= function(value,key){
			this.afDict[key]=value;
		};
		this.valueForKey= function(key){
			return this.afDict[key];
		};
		
		//----------------------------------------------------------
    	//-------------------ACTIONS -------------------------------
    	//----------------------------------------------------------
    	
    	//When the enrichment is ready to start, it should call this action
    	//Note: the action is exposed publicly because we may want to call it with a bunch of other actions (in that case calling readyToDisplay() is not enough)
    	this.readyToDisplayActionXML = "<action targetId=\"self\" name=\"readyToDisplay\"/>";
    	
    	this.readyToDisplay = function(){
    		this.wrapAndCallOutActions(this.readyToDisplayActionXML);
    	};

		this.simpleCallOutActionWithName = function(actionName){
			var actionsXMLString = "<action targetId=\"self\" name=\"webAction\" key=\""+actionName+"\"/>";
			this.wrapAndCallOutActions(actionsXMLString);
		}
    	
    	//Host player will use this function has the entry point for in actions
    	//Enrichment developpers are supposed to override this function to make it parse the in action XML that they defined in the manifest and execute them.
		this.callInAction = function(xmlStr){
			alert("todo replace afdp.callInAction");
			return "no specific action";
		};
		
		//Wraps the actions XML supplied as args in an <actions/> XML tag and use the env specific method to send it to the player.
		this.wrapAndCallOutActions = function (actionsXML){
			if(actionsXML && actionsXML.length){
				var actionsXMLString = "<actions>"
				for(var i = 0 ; i<actionsXML.length ; i++){
					actionsXMLString += actionsXML[i];
				}
				actionsXMLString += "</actions>"
				
				this.callOutActions(actionsXMLString);
			}
		};
		
		
		
		//Only here as a convenience method to build action xml for custom actions that only have attributes 
		this.buildSimpleActionXML - function(targetId , actionName , params){
			var xml = '<action targetId="';
			xml += this.objectReferenceMap[targetId]+'" name="'+actionName+'"><actionData ';
			for(var key in params){
				xml+= key+'="'+params[key]+'" ';
			}
			xml+='/></action>';
			
			return xml;
		};
		
    	//----------------------------------------------------------
    	//-------------------ENV DETECTION -------------------------
    	//----------------------------------------------------------
    	
    	//First, find out which environment we are running in
    	var ua = navigator.userAgent.toLowerCase();
		
    	var envID ;
    	if( (ua.indexOf("iphone")>=0) || (ua.indexOf("ipod")>=0) || (ua.indexOf("ipad")>=0) ) {
    		envID = "iOS";
    	}else if(ua.indexOf("android") >= 0){
    		envID = "android";
    	}else if( document.getElementById("flashObject") ){
    		envID = "flash";
    	}else{
			envID = "debug";
		}
		
		//alert("environment: "+envID+" - " + ua);
		
		//Then initialize some functions depending on the env
		
		switch(envID){
			
			case "iOS":
				//----------------------------------------------------------
		    	//------------------- IOS INIT -----------------------------
		    	//----------------------------------------------------------
		    	
		
				this.callOutActions = function(actionsXMLString){
					window.location = 'AFAVEReaderProtocol://xml?actions=' + encodeURIComponent(actionsXMLString);
				};
				this.log = function(message){
					//window.location = 'log://' + message;
				};
				
		    break;
			
			
			case "android":
				//----------------------------------------------------------
		    	//------------------- ANDROID INIT -------------------------
		    	//----------------------------------------------------------
		    	this.callOutActions = function(actionsXMLString){
					//TO DO
				};
				this.log = function(message){
					//TO DO
				};
				
			break;
			
			
			case "flash":
				//----------------------------------------------------------
		    	//------------------- FLASH INIT -------------------------
		    	//----------------------------------------------------------
		    	this.callOutActions = function(actionsXMLString){
					//TO DO
				};
				this.log = function(message){
					//TO DO
				};
				
			break;
			
			case "debug":
			default:
		    	//----------------------------------------------------------
		    	//------------------- DEBUG INIT -------------------------
		    	//----------------------------------------------------------
		    	
				this.callOutActions = function(actionsXMLString){
					console.log("#CallAction",actionsXMLString);
				};
				this.log = function(){ 
					console.log(arguments);
				}
				
			break;
		}
    }
    
    
    //afdp should be the only global entry point in order to avoir naming collisions
    window.afdp = new AFDPConstructor();
})();