var videoGrid = angular.module("videoGrid", []);

videoGrid.controller("videoGridCtrl", [ "$scope", "$attrs", "$element", function(a, b, c) {
    if (a.videos = Drupal.settings.smgVideoGrid.videos, a.gridWidth = 4, a.videosInGroup = 12, 
    a.gridWidthClass = "grid-width-" + a.gridWidth, a.currentCount = 1, a.totalVideos = Drupal.settings.smgVideoGrid.total_count, 
    a.videoGroups = {}, "undefined" !== a.videos) for (i = 1; i <= Math.ceil(a.videos.length / a.videosInGroup); i++) {
        var d = (i - 1) * a.videosInGroup, e = i * a.videosInGroup;
        a.videoGroups[i] = a.videos.slice(d, e);
    }
    a.gridGroupShow = function(b) {
        return b == a.currentCount;
    }, a.hasMoreVideos = a.totalVideos > a.videosInGroup, a.hasPreviousVideos = !1, 
    a.countRemaining = function() {
        return a.videoGroups[a.currentCount + 1].length;
    }, a.countPrevious = function() {
        return a.videoGroups[a.currentCount - 1].length;
    }, a.firstVideoGroup = !1, a.changeFirstGroupsMargin = function() {
        var b = -100 * (a.currentCount - 1) + "%";
        a.firstVideoGroup || (a.firstVideoGroup = c.find(".smgVideoGrid-video-group.first")), 
        a.firstVideoGroup.css({
            "margin-left": b
        });
    }, a.incrementCounter = function() {
        a.currentCount++, a.videoGroups.hasOwnProperty(a.currentCount + 1) && 0 != a.videoGroups[a.currentCount + 1].length || (a.hasMoreVideos = !1), 
        a.hasPreviousVideos = !0, a.changeFirstGroupsMargin();
    }, a.decrementCounter = function() {
        a.currentCount--, a.hasMoreVideos = !0, 1 == a.currentCount && (a.hasPreviousVideos = !1), 
        a.changeFirstGroupsMargin();
    }, a.isVideoFirst = function(b) {
        var c = b + 1;
        return 1 == c || c % a.gridWidth == 1 ? "is-first-video" : "not-first-video";
    };
} ]), videoGrid.directive("videoGrid", [ function() {
    return videoGridTpl = Drupal.settings.smgAngularTemplates.videoGrid, {
        restrict: "E",
        scope: !0,
        replace: !0,
        controller: "videoGridCtrl",
        templateUrl: videoGridTpl
    };
} ]), videoGrid.directive("smgGridLightbox", [ "$timeout", function(a) {
    return {
        restrict: "A",
        scope: !0,
        link: function(b, c) {
            a(function() {
                var a = {};
                "video" in b && (b.video.hasOwnProperty("companyName") && (a.companyName = b.video.companyName), 
                b.video.hasOwnProperty("companyNid") && (a.companyNid = b.video.companyNid)), createLinkPlayer(c[0], a);
            }, 0);
            var d = c.parents(".smgVideoGrid-video");
            d.on("click", function() {
                c[0].click();
            });
        }
    };
} ]), videoGrid.filter("cut", function() {
    return function(a, b, c, d) {
        if (!a) return "";
        if (c = parseInt(c, 10), !c) return a;
        if (a.length <= c) return a;
        if (a = a.substr(0, c), b) {
            var e = a.lastIndexOf(" ");
            -1 != e && (a = a.substr(0, e));
        }
        return a + (d || " ...");
    };
}), window.smgAngularDependencies.push("videoGrid");