function isIE() {
    var a = navigator.userAgent.toLowerCase();
    return -1 != a.indexOf("msie") ? parseInt(a.split("msie")[1]) : !1;
}

var videoWidget = angular.module("videoWidget", [ "videoWidgetConfig", "ngTouch" ]);

videoWidget.run(function() {}), videoWidget.controller("VideoListCtrl", [ "$scope", "getConfig", "$attrs", "$http", "$element", "$window", "$timeout", function(a, b, c, d, e, f, g) {
    a.pager_current_page = 0, a.nid = c.nid, a.isDataCard = c.hasOwnProperty("datacard") && c.datacard, 
    a.tid = c.hasOwnProperty("tid") ? c.tid : !1, a.videos = {};
    var h = !1;
    if (!a.isDataCard && Drupal.settings.hasOwnProperty("pmg_youtube_feed_leadership") ? Drupal.settings.pmg_youtube_feed_leadership.hasOwnProperty(a.nid) && (h = Drupal.settings.pmg_youtube_feed_leadership[a.nid]) : a.isDataCard && a.tid && Drupal.settings.hasOwnProperty("leadershipDatacard") && Drupal.settings.leadershipDatacard.hasOwnProperty(a.tid) && Drupal.settings.leadershipDatacard[a.tid].hasOwnProperty(a.nid) && (h = Drupal.settings.leadershipDatacard[a.tid][a.nid].pmg_youtube_feed_videos[a.nid]), 
    h && (a.page = h.page, a.pageCount = h.page_count, a.totalCount = h.total_count, 
    a.companyName = h.companyName, a.videos = h.videos), a.config = b, a.currentCount = 1, 
    a.videoWidgetParams = {
        videosToShow: a.isDataCard ? 3 : a.config.videosToShow,
        oldVideosToShow: a.isDataCard ? 3 : a.config.videosToShow
    }, a.setUpPager = function() {
        a.pages = [];
        for (var b = 5, c = a.getNumberOfPages(), d = 0, e = 0, f = [], g = 0; c > g; g++) e == b && (e = 0, 
        d += b), f.push({
            page_start: d
        }), e++;
        if (void 0 !== f[a.pager_current_page]) for (var h = f[a.pager_current_page].page_start, g = h; h + b > g && c > g; g++) {
            var i = a.pager_current_page === g ? !0 : !1;
            a.pages.push({
                number: g,
                active: i
            });
        }
    }, a.goToPage = function(b) {
        var c, d, e;
        if (b === a.pager_current_page) return !1;
        for (b < a.pager_current_page ? (c = "Previous", d = a.pager_current_page - b) : (c = "Next", 
        d = b - a.pager_current_page), i = 0; i < d; i++) "Next" == c && (e = 700, i > 3 && (e = 1e3), 
        g(function() {
            a.videosNext();
        }, e * i)), "Previous" == c && a.videosPrev();
    }, a.getNumberOfPages = function() {
        return Math.ceil(a.totalCount / a.videoWidgetParams.videosToShow);
    }, a.getNumberOfPagesLeft = function() {
        return a.getNumberOfPages - a.pager_current_page;
    }, a.setPage = function(b) {
        "add" == b ? a.pager_current_page++ : "subtract" == b && a.pager_current_page--;
    }, a.updateVideosToShow = function(b) {
        a.videoWidgetParams.oldVideosToShow = a.videoWidgetParams.videosToShow, a.videoWidgetParams.videosToShow = b, 
        a.normalizeCount();
    }, a.videoBlockCount = function() {
        return Math.ceil(a.videos.length / a.videoWidgetParams.videosToShow);
    }, a.isLastVideoBlock = !1, a.sizeOfObj = function(a) {
        var b, c = 0;
        for (b in a) a.hasOwnProperty(b) && c++;
        return c;
    }, a.isLastVideoBlockCalculate = function() {
        return a.videoBlockCount() - a.currentCount === 0 && !(a.sizeOfObj(a.videos) < a.totalCount);
    }, a.videosNext = function() {
        var b = a.videoBlockCount();
        if (a.currentCount < b) {
            if (b - a.currentCount === 1) if (a.sizeOfObj(a.videos) < a.totalCount) {
                var c = a.isDataCard ? "datacard" : "node", e = "/pmg_youtube_feed_leadership/get/json/" + a.nid + "/" + c + "/" + ++a.page;
                d({
                    method: "GET",
                    url: e
                }).success(function(b, c, d, e) {
                    for (var f = 0; f < b.videos.length; f++) a.videos.push(b.videos[f]);
                });
            } else a.isLastVideoBlock = !0;
            a.currentCount++, a.setPage("add");
        }
    }, a.videosPrev = function() {
        a.currentCount > 1 && (a.currentCount--, a.isLastVideoBlock = !1, a.setPage("subtract"));
    }, a.draw = function() {
        a.setUpPager();
        var b = (a.currentCount - 1) * a.videoWidgetParams.videosToShow, c = a.currentCount * a.videoWidgetParams.videosToShow;
        a.isLastVideoBlock = a.isLastVideoBlockCalculate(), a.extraCssClasses.lastVideoBlock = a.isLastVideoBlock, 
        angular.forEach(a.videos, function(a, d) {
            d >= b && c > d ? (a.visible = !0, a.videoCss = c - d == 1 ? {
                noHide: !0,
                lastNoHide: !0
            } : {
                noHide: !0,
                lastNoHide: !1
            }) : (a.visible = !1, b > d ? a.videoCss = "hideLeft" : a.videoCss = "hideRight");
        });
    }, a.normalizeCount = function() {
        var b = a.currentCount * a.videoWidgetParams.oldVideosToShow - (a.videoWidgetParams.oldVideosToShow - 1), c = a.videoWidgetParams.videosToShow;
        c > b ? a.currentCount = 1 : b % c ? a.currentCount = Math.floor(b / c) + 1 : a.currentCount = b / c;
    }, a.responsiveCssClasses = {
        full: !0,
        twoVideo: !1,
        oneVideo: !1,
        max480: !1
    }, a.config.hasOwnProperty("extraResponsiveClasses") && !a.isDataCard) for (var j in a.config.extraResponsiveClasses) a.responsiveCssClasses[j] = a.config.extraResponsiveClasses[j];
    a.extraCssClasses = void 0 !== a.config.extraCssClasses ? angular.copy(a.config.extraCssClasses) : {}, 
    a.mergeCssClassesObjs = function() {
        for (var b in a.responsiveCssClasses) a.extraCssClasses[b] = a.responsiveCssClasses[b];
    }, a.mergeCssClassesObjs(), a.site = a.config.hasOwnProperty("site") ? a.config.site : !1;
} ]), videoWidget.directive("videoWidget", [ "$window", "$timeout", function(a, b) {
    var c = Drupal.settings.smgAngularTemplates.videoWidget;
    return {
        restrict: "E",
        replace: !0,
        scope: !0,
        controller: "VideoListCtrl",
        link: function(a, c, d) {
            d.$observe("nid", function(b) {
                a.nid = b;
            }), b(function() {
                c.find(".videoWidget-count-selector").each(function(a, b) {
                    new FastClick(b);
                });
            }, 100);
        },
        templateUrl: c
    };
} ]), videoWidget.directive("videoSlider", [ "$timeout", function(a) {
    var b = Drupal.settings.smgAngularTemplates.video;
    return {
        restrict: "AE",
        replace: !0,
        scope: !0,
        link: function(a) {
            a.$watch("currentCount", function() {
                a.draw();
            });
        },
        templateUrl: b
    };
} ]), videoWidget.directive("resizable", [ "$window", "getConfig", function(a, b) {
    return {
        restrict: "AE",
        scope: !0,
        link: function(c) {
            var d = angular.element(a);
            c.getWindowDimensions = function() {
                return {
                    w: d.width(),
                    h: d.height()
                };
            }, c.$watch(c.getWindowDimensions, function(a, d) {
                var e = function(a, b) {
                    c.responsiveCssClasses[b] || (c.updateVideosToShow(a), f(b), c.draw());
                }, f = function(a) {
                    if (!c.responsiveCssClasses[a]) {
                        for (var b in c.responsiveCssClasses) c.responsiveCssClasses.hasOwnProperty(b) && (b == a ? c.responsiveCssClasses[b] = !0 : c.responsiveCssClasses[b] = !1);
                        c.mergeCssClassesObjs();
                    }
                }, g = b.videosToShowMapping(a);
                c.isDataCard && "ppoem" !== c.site || e(g.mappingVideos, g.mappingClass);
            }, !0), d.bind("resize", function() {
                c.$apply();
            });
        }
    };
} ]), videoWidget.directive("smgLightbox", [ "$timeout", function(a) {
    return {
        restrict: "A",
        scope: !0,
        link: function(b, c) {
            a(function() {
                var a = {};
                "video" in b && (b.video.hasOwnProperty("companyName") && (a.companyName = b.video.companyName), 
                b.video.hasOwnProperty("companyNid") && (a.companyNid = b.video.companyNid)), createLinkPlayer(c[0], a);
            }, 0);
            var d = c.parents(".videoWidget-video");
            d.on("click", function() {
                c[0].click();
            });
        }
    };
} ]), videoWidget.directive("videoContainerStyle", [ "$window", "$timeout", function(a, b) {
    return {
        require: "videoContainerStyle",
        restrict: "A",
        scope: !0,
        controller: [ "$scope", "$element", function(b, c) {
            this.changeVideoContainerHeight = function() {
                var d = c, e = jQuery(a), f = function() {
                    var a = navigator.userAgent.toLowerCase();
                    return -1 != a.indexOf("msie") ? parseInt(a.split("msie")[1]) : !1;
                }, f = f();
                f && jQuery.inArray(f, [ "6", "7", "8" ]);
                if (e.innerWidth() > 480 || f) {
                    var g = b.videoWidgetParams.videosToShow, h = c.parents(".videoWidget-wrapper").width(), i = .94;
                    if ("none" != c.css("max-width")) {
                        var j = c.css("max-width");
                        j.search("%") > -1 && (i = parseFloat(j) / 100);
                    }
                    var k = i * h;
                    if (k % g != 0) {
                        var l = Math.floor(k / g) * g;
                        c.css({
                            width: l + "px"
                        });
                    }
                    c.css({
                        height: ""
                    });
                } else {
                    var m = 0;
                    d.find(".videoWidget-video.noHide").each(function(a, b) {
                        m += jQuery(b).outerHeight(!0);
                    }), m -= 2 * parseInt(d.find(".videoWidget-video.lastNoHide").css("margin-bottom")), 
                    c.css({
                        height: m + "px"
                    }), c.css({
                        width: ""
                    });
                }
            }, this.emitVideoClick = function() {
                b.$emit("smgLightboxOpen", []);
            };
        } ],
        link: function(b, c, d, e) {
            b.$watch(b.getWindowDimensions(), function() {
                e.changeVideoContainerHeight();
            }), angular.element(a).bind("resize", function() {
                e.changeVideoContainerHeight();
            }), b.$on("leadershipHoverBegin", function() {
                e.changeVideoContainerHeight(), b.$broadcast("videoContainerVisible");
            });
        }
    };
} ]), videoWidget.directive("videoStyle", [ "$window", "$timeout", function(a, b) {
    return {
        restrict: "A",
        require: "^videoContainerStyle",
        scope: !0,
        link: function(c, d, e, f) {
            c.changeVideoStyles = function() {
                if (a.innerWidth < 480) {
                    var e = d.siblings().first().height();
                    d.siblings().height(e + "px"), d.css("margin-left", ""), c.$first && b(function() {
                        d.css("width", ""), d.siblings().css("width", "");
                    }, 200), c.$last && (b(f.changeVideoContainerHeight, 1e3), b(f.changeVideoContainerHeight, 4e3)), 
                    c.$first && c.currentCount > 1 && b(function() {
                        var a = parseInt(d.css("margin-bottom"));
                        newMargin = -1 * (c.currentCount - 1) * (d.outerHeight() * c.videoWidgetParams.videosToShow + a * c.videoWidgetParams.videosToShow), 
                        newMargin += a, d.css({
                            "margin-top": newMargin + "px"
                        });
                    }, 300);
                } else {
                    if (0 === c.$index) {
                        b(function() {
                            var a = d.parents(".videoWidget-videos"), b = Math.floor(a.width() / c.videoWidgetParams.videosToShow);
                            d.css({
                                width: b
                            }), d.siblings(".videoWidget-video").css({
                                width: b
                            });
                        }, 100);
                        var g = -100 * (c.currentCount - 1);
                        d.css({
                            "margin-left": g + "%"
                        });
                    }
                    d.css({
                        height: ""
                    });
                }
            }, c.$watch("currentCount", function() {
                c.changeVideoStyles();
            }), angular.element(a).bind("resize", function() {
                d.is(":visible") && c.changeVideoStyles();
            }), d.find("a").each(function(a) {
                jQuery(this).on("click", function(a) {
                    f.emitVideoClick();
                });
            }), c.$on("videoContainerVisible", function() {
                d.css({
                    transition: "none"
                }), c.changeVideoStyles(), b(function() {
                    d.css({
                        transition: ""
                    });
                }, 100);
            });
        }
    };
} ]), videoWidget.directive("dotdotdot", [ "$timeout", function(a) {
    return {
        restrict: "A",
        scope: !0,
        link: function(a, b, c) {
            b.dotdotdot({
                watch: !0
            });
        }
    };
} ]), videoWidget.directive("videoWidgetPager", function() {
    return {
        restrict: "E",
        replace: !0,
        scope: !0,
        template: '<div class="video-widget-pager"><div ng-repeat="page in pages" class="video-widget-pager-item"><a href="" ng-click="goToPage(page.number)" data-slide-index="{{$index}}" class="video-widget-pager-link" ng-class="page.active ? \'active\' : \'\'">{{page.number}}</a></div></div>'
    };
}), window.smgAngularDependencies.push("videoWidget");